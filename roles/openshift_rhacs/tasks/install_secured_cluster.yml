- name: Create stackrox namespace if it does not exist
  k8s:
    definition: "{{ lookup('template', 'stackrox-ns.yaml') }}"

- import_tasks: get_rhacs_route.yml

- name: Waiting since {{ lookup("pipe", "date +%r") }} for Central to come up
  uri:
    url: 'https://{{ rhacs_route.resources.0.spec.host }}/v1/ping'
    url_username: admin
    url_password: '{{ generic_user_password }}'
    force_basic_auth: True
    validate_certs: False
  ignore_errors: True
  register: get_ping
  until:
    - get_ping.status == 200
  retries: 30
  delay: 10

- fail:
  when: get_ping is failed

- name: Try to generate init-bundle for cluster (returns HTTP 409 if bundle already exists)
  uri:
    url: 'https://{{ rhacs_route.resources.0.spec.host }}/v1/cluster-init/init-bundles'
    method: POST
    body_format: json
    body:
      name: this-cluster
    url_username: admin
    url_password: '{{ generic_user_password }}'
    force_basic_auth: True
    validate_certs: False
    status_code: [ 200, 409 ]
  register: generate_cert_result

- name: Apply the generated init-bundle (skip if no new bundle generated in the previous step)
  command: oc apply --namespace {{ rhacs_instance_namespace }} --filename -
  args:
    stdin: '{{ generate_cert_result.json.kubectlBundle | b64decode }}'
  when: generate_cert_result.status == 200

- name: Deploy secured cluster services
  k8s:
    definition: "{{ lookup('template', 'stackrox-secured-cluster-services-securedcluster.yaml') }}"

- name: Waiting since {{ lookup("pipe", "date +%r") }} for this-cluster to become healthy
  uri:
    url: 'https://{{ rhacs_route.resources.0.spec.host }}/v1/clusters'
    url_username: admin
    url_password: '{{ generic_user_password }}'
    force_basic_auth: True
    validate_certs: False
  register: get_clusters_result
  until:
    - (get_clusters_result.json.clusters | selectattr("name", "equalto", "this-cluster") | length) == 1
    - (get_clusters_result.json.clusters | selectattr("name", "equalto", "this-cluster") | first).healthStatus != None
    - (get_clusters_result.json.clusters | selectattr("name", "equalto", "this-cluster") | first).healthStatus.overallHealthStatus == 'HEALTHY'
  retries: 120
  delay: 10
