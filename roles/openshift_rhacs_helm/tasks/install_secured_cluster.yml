- name: Create rhacs-this-cluster namespace
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'rhacs-this-cluster-ns.yaml') }}"

- name: Obtain RHACS route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: central
    namespace: '{{ rhacs_central_namespace }}'
  register: rhacs_route
  until: rhacs_route.resources | length > 0
  retries: 12
  delay: 10

- name: Waiting since {{ lookup("pipe", "date +%r") }} for Central to come up
  uri:
    url: 'https://{{ rhacs_route.resources.0.spec.host }}/v1/ping'
    url_username: admin
    url_password: '{{ generic_user_password }}'
    force_basic_auth: true
    validate_certs: false
  register: get_ping
  until:
    - get_ping.status == 200
  retries: 30
  delay: 10

- name: Try to generate init-bundle for this-cluster (returns HTTP 409 if bundle already exists)
  uri:
    url: 'https://{{ rhacs_route.resources.0.spec.host }}/v1/cluster-init/init-bundles'
    method: POST
    body_format: json
    body:
      name: this-cluster
    url_username: admin
    url_password: '{{ generic_user_password }}'
    force_basic_auth: true
    validate_certs: false
    status_code: [ 200, 409 ]
  register: generate_cert_result

- set_fact:
    release_values_1: '{{ generate_cert_result.json.helmValuesBundle | b64decode | from_yaml }}'
    release_values_2:
      clusterName: this-cluster
      centralEndpoint: '{{ rhacs_route.resources.0.spec.host }}:443'
      allowNonstandardNamespace: true
      allowNonstandardReleaseName: true
  when: generate_cert_result.status == 200

- set_fact:
    release_values_combined: '{{ release_values_1 | combine(release_values_2) }}'
  when: generate_cert_result.status == 200

- name: Deploy RHACS secured cluster services
  kubernetes.core.helm:
    name: rhacs-secured-cluster-services
    chart_ref: rhacs/secured-cluster-services
    chart_version: '{{ rhacs_version }}'
    release_namespace: '{{ rhacs_secured_cluster_services_namespace }}'
    release_values: '{{ release_values_combined }}'
    wait: true
  when: generate_cert_result.status == 200
